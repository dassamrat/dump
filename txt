"Broker Running Outdated Version" for Wiz Broker
1. Understand the Error
This error means the Wiz Broker version running in your environment is outdated and needs to be upgraded to maintain compatibility and receive security updates.

2. Check Supported Versions
Review broker version compatibility and release notes to identify the latest supported versions.

Reference: Wiz Broker Version Documentation and Changelog.

See: https://docs.wiz.io/wiz-docs/changelog/wiz-broker-releasenotes (as mentioned in original output).

3. Upgrade the Wiz Broker
Choose Your Installation/Upgrade Method
Helm-Based Deployments (Kubernetes):

Open your terminal.

Ensure Helm and kubectl are installed and configured for your cluster.

Get the latest broker chart version from the Wiz charts repository:
https://github.com/wiz-sec/charts.

Upgrade with Helm:

text
helm repo add wiz-sec https://wiz-sec.github.io/charts/
helm repo update
helm upgrade --install wiz-broker wiz-sec/wiz-broker \
  --namespace <your-namespace> \
  --version <latest-version>
Replace <your-namespace> and <latest-version> with appropriate values.

Direct Manifest (YAML) or Other Orchestrators:

Download the latest broker manifest as specified in official Wiz docs.

Apply using:

text
kubectl apply -f wiz-broker-latest.yaml
Ensure any required secrets or ConfigMaps are updated as per new version documentation.

Restart/Verify Deployment
After upgrade, ensure the broker Pod reboots and pulls the new image/version.

Check logs to verify that no "outdated version" message appears.

4. References for Update Process
Official step-by-step upgrade guide:

https://docs.wiz.io/wiz-docs/setup-wiz-broker/upgrade (as suggested in error message).

Wiz broker Helm charts:

https://github.com/wiz-sec/charts.

Release notes and version compatibility:

https://docs.wiz.io/wiz-docs/changelog/wiz-broker-releasenotes.

Example Upgrade Command (replace values as needed)
shell
helm repo add wiz-sec https://wiz-sec.github.io/charts/
helm repo update
helm upgrade --install wiz-broker wiz-sec/wiz-broker \
  --namespace wiz-system \
  --version 0.4.0



Wiz Sensor Failed to Run - Troubleshooting and Support Package Creation Guide
When the Wiz Runtime Sensor fails to run on Kubernetes or Linux, the recommended way to resolve or escalate the issue is by collecting a support package for deeper analysis. This document guides you step-by-step on how to create the support package, collect necessary information, and work with Wiz Support.

1. Verify Network and System Requirements
Ensure outbound connectivity to Wiz backend services at https://auth.app.wiz.io; firewall or proxy rules must allow this for the sensor to operate correctly.

Make sure your platform meets the prerequisites for the Wiz sensor, such as supported versions of Kubernetes or Linux kernel, and required system resources.

For Kubernetes, confirm the DaemonSet is correctly scheduled and pods are running with healthy status (kubectl get pods --namespace=<wiz-namespace>).

2. Gather Diagnostic Information
Capture logs from the affected Wiz sensor pods or processes:

For Kubernetes:

text
kubectl logs <wiz-sensor-pod-name> --namespace=<wiz-namespace>
For Linux:

text
sudo journalctl -u wiz-sensor
Note any specific error messages, for example “failed loading sensor configuration,” “missing sensor content,” or health check failures.

3. Create a Support Package
Follow official guides to package logs and metadata for Wiz Support:

Kubernetes Sensor:
Refer to:

text
https://docs.wiz.io/wiz-docs/docs/sensor-troubleshooting#create-support-package-for-the-kubernetes-sensor
Steps usually include running the supplied script/command to collect config, logs, and environment info from the cluster.

Linux Sensor:
Refer to:

text
https://docs.wiz.io/wiz-docs/docs/linux-sensor-troubleshooting#create-support-package-for-the-linux-sensor
Use the provided scripts or manual instructions to package up logs and system details.

4. Common Diagnostic Checks
Roll back to a previous working version of the Wiz sensor if a recent upgrade coincided with the problem; version differences may impact compatibility.

Review resource and permissions requirements for the sensor—CPU, memory, and service account privileges must be correct.

Validate cluster/pod configuration, such as image and repository definitions, per Kubernetes best practices.

5. Escalate to Wiz Support
Once your support package is prepared, submit it via the Wiz support portal:

Go to: https://docs.wiz.io/wiz-docs/docs/support

Attach the generated package and provide a detailed description of errors, version numbers, and steps to reproduce.










1. Outdated Kernel Version
Issue:
System is running an unsupported Linux kernel version for the sensor.

Diagnosis:

Sensor displays a message about outdated kernel.

Reference link:

text
https://docs.wiz.io/wiz-docs/docs/sensor-architectures-and-platforms
Resolution Steps:

Visit the documentation link shown above to review supported Linux kernel versions.

Check the current kernel version on your host:

text
uname -r
Compare your kernel version with the supported list in documentation.

If unsupported:

Plan system maintenance to upgrade/downgrade your kernel to a compatible version.

Follow OS-specific instructions to update the Linux kernel.

Restart the system and re-validate compatibility.

2. Runtime Sensor Reached Its Memory Limit
Issue:
Sensor memory usage has hit its maximum allowed limit.

Diagnosis:

Logs or monitoring show memory capped alerts for the sensor.

Resolution Steps:
For Kubernetes Sensor:

Increase the sensor memory limit via helm chart value.

Example:

text
sensor:
  resources:
    limits:
      memory: <higher-value>
Apply updated configuration with Helm:

text
helm upgrade ...
Documentation link:

text
https://docs.wiz.io/wiz-docs/docs/sensor-install
For Linux Sensor:

Export environment variable with higher memory:

text
export MAX_MEMORY_LIMIT=<higher-value>
Restart the sensor process/service.

3. Sensor Doesn’t Have Enough CPU
Issue:
CPU resources allocated to the sensor are insufficient.

Diagnosis:

Monitoring tools/logs indicate CPU throttling or insufficient CPU for the sensor.

Resolution Steps:
For Kubernetes Sensor:

Increase the CPU limit in helm values, e.g.:

text
sensor:
  resources:
    limits:
      cpu: <higher-value>
Re-apply helm deployment update:

text
helm upgrade ...
Reference:

text
https://docs.wiz.io/wiz-docs/docs/sensor-install
For Linux Sensor:

Export environment variable with higher CPU allocation:

text
export MAX_CPU_LIMIT=<higher-value>
Restart the sensor process.

4. Sensor-Based Networked Scanner Doesn’t Have Enough Memory
Issue:
The networked scanner component is hitting its memory cap.

Diagnosis:

Logs or monitoring alert for memory exhaustion in the networked scanner.

Resolution Steps:

Increase the memory limit for the scanner as per documentation.

Reference guide:

text
https://docs.wiz.io/wiz-docs/docs/install-sensor-based-networked-scanner
Update config and restart the networked scanner component.

Monitor resource usage after change.












Problem 1: Sensor-Based Workload Scanner Installed on Unsupported Workload
Symptoms:

Warning: "Installed on an unsupported workload."

Dysfunction or errors on unsupported resources.

Resolution Steps:

Uninstall the sensor from unsupported workload as per vendor documentation.

Check supported workloads in official release notes.

Reinstall sensor only on supported environments.

Validation:

Warning disappears.

Sensor runs without errors.

Problem 2: Outdated Sensor Version Detected
Symptoms:

Message about outdated sensor version.

Potential incompatibility or loss of support.

Resolution Steps:

Review sensor documentation for supported versions.

Download and install the latest sensor release for your platform.

Restart sensor service after upgrade.

Validation:

Latest version is running.

No outdated version warning.

Problem 3: Sensor Version Approaching End of Support
Symptoms:

Warning about end-of-support threshold.

Advance notices about lifecycle expiration.

Resolution Steps:

Check lifecycle status in sensor release notes.

Plan upgrade before support ends.

Notify IT/DevOps teams and schedule upgrade.

Validation:

Version upgraded before expiry.

No end-of-support notifications.

Problem 4: New Sensor-Based Workload Scanner Version Available
Symptoms:

Notification: “A new Sensor-based workload scanner version is available.”

Recommendation to update to latest version.

Resolution Steps:

Review the release notes for the new version and its features.

Download and install the latest sensor-based workload scanner for your environment.

Restart the scanner service post-update.

Confirm that the update process was successful in logs or UI.

Validation:

The system shows the newest installed version.

Update notification disappears.

Scanner is healthy and reports compatible status.












