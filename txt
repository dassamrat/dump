import requests
import csv
import base64
import json

# Environment variables - replace with your actual values
WIZ_CLIENT_ID = "YOUR_CLIENT_ID"
WIZ_CLIENT_SECRET = "YOUR_CLIENT_SECRET"
WIZ_AUDIENCE = "api"  # Confirm if different
WIZ_ENV = "prod"  # Only support prod environment now

# Auth URL for prod environment only
WIZ_AUTH_URL = "https://auth.app.wiz.io/oauth/token"

# API subdomain for prod only
WIZ_API_SUBDOMAIN = "app.wiz.io"

def get_access_token():
    payload = {
        "client_id": WIZ_CLIENT_ID,
        "client_secret": WIZ_CLIENT_SECRET,
        "audience": WIZ_AUDIENCE,
        "grant_type": "client_credentials"
    }
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    response = requests.post(WIZ_AUTH_URL, data=payload, headers=headers)
    response.raise_for_status()
    token = response.json()["access_token"]
    return token

def extract_dc_from_token(token):
    # Decode JWT token payload to extract 'dc' field
    payload_part = token.split('.')[1]
    padded = payload_part + '=' * (-len(payload_part) % 4)  # Pad base64 string
    decoded_bytes = base64.urlsafe_b64decode(padded)
    claims = json.loads(decoded_bytes)
    return claims.get("dc", "unknown")

def get_wiz_api_url(dc):
    return f"https://api.{dc}.{WIZ_API_SUBDOMAIN}/graphql"

def run_graphql_query(token, api_url, query, variables=None):
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    body = {
        "query": query,
        "variables": variables or {}
    }
    response = requests.post(api_url, json=body, headers=headers)
    response.raise_for_status()
    return response.json()

def write_csv(filename, data, headers):
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=headers)
        writer.writeheader()
        writer.writerows(data)

if __name__ == "__main__":
    token = get_access_token()
    dc = extract_dc_from_token(token)
    api_url = get_wiz_api_url(dc)

    # Query connectors (example query - adjust as needed)
    connectors_query = """
    query Connectors($first: Int) {
      connectors(first: $first) {
        nodes {
          id
          name
          type { id name }
          enabled
          status
          errorCode
          lastActivity
          createdAt
          addedBy { name email }
          connectorIssues { count }
        }
      }
    }
    """
    connectors_result = run_graphql_query(token, api_url, connectors_query, {"first": 500})
    connector_nodes = connectors_result.get("data", {}).get("connectors", {}).get("nodes", [])
    
    connector_data = []
    for c in connector_nodes:
        connector_data.append({
            "id": c.get("id"),
            "name": c.get("name"),
            "type_id": c.get("type", {}).get("id"),
            "type_name": c.get("type", {}).get("name"),
            "enabled": c.get("enabled"),
            "status": c.get("status"),
            "errorCode": c.get("errorCode"),
            "lastActivity": c.get("lastActivity"),
            "createdAt": c.get("createdAt"),
            "addedBy_name": c.get("addedBy", {}).get("name"),
            "addedBy_email": c.get("addedBy", {}).get("email"),
            "connectorIssues_count": c.get("connectorIssues", {}).get("count"),
            "dc": dc
        })
    write_csv("connector_status.csv", connector_data, connector_data[0].keys() if connector_data else [])

    print("Connector data written to connector_status.csv")

